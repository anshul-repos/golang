package main

import "fmt"

// Go ‡§Æ‡•á‡§Ç ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à struct ‡§â‡§® ‡§∏‡§≠‡•Ä methods ‡§ï‡•ã implement ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä interface ‡§Æ‡•á‡§Ç declared ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§µ‡§π ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§â‡§∏ interface ‡§ï‡•ã implement ‡§ï‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
// Rectangle aur Circle ‡§®‡•á Area() ‡§î‡§∞ Perimeter() method implement ‡§ï‡§∞ ‡§¶‡§ø‡§è ‡§π‡•à‡§Ç, ‡§á‡§∏‡§≤‡§ø‡§è ‡§Ø‡§π ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ Shape interface ‡§ï‡•ã implement ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à ‚Äî ‡§π‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ declare ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç‡•§

type Shape interface {
	Area() float64
	Perimeter() float64
}

type Circle struct {
	Radius float64
}

type Rectangle struct {
	Length  float64
	Breadth float64
}

func (c Circle) Area() float64 {
	return 2 * 3.24 * c.Radius * c.Radius
}

func (r *Rectangle) Area() float64 {
	return r.Length * r.Breadth
}

func (c Circle) Perimeter() float64 {
	return 2 * 3.24 * c.Radius
}

func (r *Rectangle) Perimeter() float64 {
	return 2 * (r.Length + r.Breadth)
}

func main() {
	var s Shape
	s = Circle{Radius: 2}
	fmt.Println("\n Area of Circle: ", s.Area())

	s = &Rectangle{Length: 2, Breadth: 2}
	fmt.Println("\n Area of Rectangle: ", s.Area())
}

// ‡§è‡§ï ‡§π‡•Ä interface variable s ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è, ‡§Ü‡§™ ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó type ‡§ï‡•á objects (Circle ‡§î‡§∞ Rectangle) ‡§ï‡•ã handle ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§â‡§®‡§ï‡•á methods ‡§ï‡•ã call ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‚Äî ‡§¨‡§ø‡§®‡§æ ‡§Ø‡•á ‡§ú‡§æ‡§®‡•á ‡§ï‡§ø s ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§ï‡•å‡§® ‡§∏‡§æ exact type ‡§∞‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
// üéØ ‡§Ø‡§π‡•Ä ‡§π‡•ã‡§§‡§æ ‡§π‡•à Polymorphism:
// "‡§è‡§ï interface, ‡§ï‡§à ‡§∞‡•Ç‡§™ (Many Forms)"
